import os
import random
from dotenv import load_dotenv
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
import time

load_dotenv()

API_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
bot = telebot.TeleBot(API_TOKEN)

games = {}

class Game:
    def __init__(self, chat_id, difficulty):
        self.chat_id = chat_id
        self.lives = 10
        self.score = 0
        self.level = 1
        self.total_questions = 0
        self.difficulty = difficulty
        self.hints_used = 0
        self.question_start_time = None

def generate_question(level, difficulty):
    ops = ['+', '-', '*', '/']
    if difficulty == 'easy':
        if level <= 5:
            a, b = random.randint(1, 5 * level), random.randint(1, 5 * level)
            op = '+'
        elif level <= 10:
            a, b = random.randint(1, 10 * (level - 5)), random.randint(1, 10 * (level - 5))
            op = random.choice(['+', '*'])
        else:
            a, b = random.randint(1, 15 * (level - 10)), random.randint(1, 15 * (level - 10))
            op = random.choice(['+', '*'])
    elif difficulty == 'medium':
        if level <= 5:
            a, b = random.randint(1, 10 * level), random.randint(1, 10 * level)
            op = random.choice(['+', '-'])
        elif level <= 10:
            a, b = random.randint(1, 15 * (level - 5)), random.randint(1, 15 * (level - 5))
            op = random.choice(['+', '-', '*'])
        else:
            a, b = random.randint(1, 20 * (level - 10)), random.randint(1, 20 * (level - 10))
            op = random.choice(ops)
    else:  # difficulty == 'hard'
        if level <= 5:
            a, b = random.randint(10 * level, 20 * level), random.randint(10 * level, 20 * level)
            op = random.choice(['+', '-', '*'])
        elif level <= 10:
            a, b = random.randint(15 * (level - 5), 30 * (level - 5)), random.randint(15 * (level - 5), 30 * (level - 5))
            op = random.choice(ops)
        else:
            a, b = random.randint(20 * (level - 10), 40 * (level - 10)), random.randint(20 * (level - 10), 40 * (level - 10))
            op = random.choice(ops)
        if op == '/':
            a = a * b
    
    if op == '-' and b > a:
        a, b = b, a
    
    question = f"{a} {op} {b}"
    answer = eval(question)
    return question, answer

def update_game_message(chat_id):
    game = games[chat_id]
    heart_emoji = '‚ù§Ô∏è'
    empty_heart_emoji = 'ü§ç'
    hint_emoji = 'üîç'
    used_hint_emoji = '‚ùå'
    lives_text = f"–ñ–∏–∑–Ω–∏: {heart_emoji * game.lives}{empty_heart_emoji * (10 - game.lives)}"
    hints_text = f"–ü–æ–¥—Å–∫–∞–∑–∫–∏: {hint_emoji * (3 - game.hints_used)}{used_hint_emoji * game.hints_used}"
    message = f"{lives_text}\n{hints_text}\nüåü –û—á–∫–∏: {game.score}"
    return message

def create_keyboard():
    keyboard = InlineKeyboardMarkup()
    keyboard.row(InlineKeyboardButton("–ù–æ–≤–∞—è –∏–≥—Ä–∞", callback_data='/start'), 
                 InlineKeyboardButton("–ü–æ–¥—Å–∫–∞–∑–∫–∞", callback_data='/hint'))
    return keyboard

@bot.message_handler(commands=['start'])
def start_game(message):
    chat_id = message.chat.id
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("–õ–µ–≥–∫–∏–π", callback_data='easy'))
    keyboard.add(InlineKeyboardButton("–°—Ä–µ–¥–Ω–∏–π", callback_data='medium'))
    keyboard.add(InlineKeyboardButton("–°–ª–æ–∂–Ω—ã–π", callback_data='hard'))
    bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data in ['easy', 'medium', 'hard'])
def set_difficulty(call):
    chat_id = call.message.chat.id
    difficulty = call.data
    games[chat_id] = Game(chat_id, difficulty)
    bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id, text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {difficulty} —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏.")
    rules = "üî¢ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫—É—é –∏–≥—Ä—É! üéÆ\n\nüìú –ü—Ä–∞–≤–∏–ª–∞:\n- –£ –≤–∞—Å –µ—Å—Ç—å 10 –∂–∏–∑–Ω–µ–π (‚ù§Ô∏è).\n- –í–∞–º –±—É–¥—É—Ç –¥–∞–≤–∞—Ç—å—Å—è —Å–ª—É—á–∞–π–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –ø–æ –∞—Ä–∏—Ñ–º–µ—Ç–∏–∫–µ.\n- –°–ª–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–º–µ—Ä–æ–≤ –±—É–¥–µ—Ç –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å—Å—è.\n- –ó–∞ –∫–∞–∂–¥—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –æ—á–∫–∏ (üåü). –ß–µ–º –±—ã—Å—Ç—Ä–µ–µ –≤—ã –æ—Ç–≤–µ—á–∞–µ—Ç–µ, —Ç–µ–º –±–æ–ª—å—à–µ –æ—á–∫–æ–≤ –ø–æ–ª—É—á–∞–µ—Ç–µ.\n- –ï—Å–ª–∏ –≤—ã –æ—à–∏–±–∞–µ—Ç–µ—Å—å –∏–ª–∏ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 12 —Å–µ–∫—É–Ω–¥, —Ç–æ —Ç–µ—Ä—è–µ—Ç–µ –∂–∏–∑–Ω—å (‚ù§Ô∏è).\n- –ò–≥—Ä–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ —É –≤–∞—Å –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è –∂–∏–∑–Ω–∏.\n- –£ –≤–∞—Å –µ—Å—Ç—å 3 –ø–æ–¥—Å–∫–∞–∑–∫–∏ (üí°), –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å."
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("–ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data='start_game'))
    bot.send_message(chat_id, rules, reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data == 'start_game')
def start_game_questions(call):
    chat_id = call.message.chat.id
    if chat_id not in games:
        bot.answer_callback_query(callback_query_id=call.id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
        return
    question, answer = generate_question(games[chat_id].level, games[chat_id].difficulty)
    games[chat_id].current_answer = answer
    games[chat_id].total_questions += 1
    games[chat_id].question_start_time = time.time()
    bot.send_message(chat_id, f"‚ùì –í–æ–ø—Ä–æ—Å {games[chat_id].total_questions}:\n{question}", reply_markup=ReplyKeyboardRemove())

@bot.message_handler(func=lambda message: True)
def check_answer(message):
    chat_id = message.chat.id
    if chat_id not in games:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start", reply_markup=create_keyboard())
        return
    game = games[chat_id]
    answer_time = time.time() - game.question_start_time
    if answer_time > 12:
        game.lives -= 1
        if game.lives == 0:
            message_text = "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∂–∏–∑–Ω–∏. –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.\n\n"
            message_text += f"üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\nüåü –û—á–∫–∏: {game.score}"
            bot.send_message(chat_id, message_text, reply_markup=create_keyboard())
            del games[chat_id]
        else:
            try:
                user_answer = int(message.text)
                if user_answer == game.current_answer:
                    answer_correct = "‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç –±—ã–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º, –Ω–æ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ."
                else:
                    answer_correct = "‚ùå –í–∞—à –æ—Ç–≤–µ—Ç –±—ã–ª –Ω–µ–≤–µ—Ä–Ω—ã–º, –∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ."
            except ValueError:
                answer_correct = "‚ùå –í—ã –Ω–µ –≤–≤–µ–ª–∏ —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç, –∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ."
            
            message_text = f"{answer_correct} –í—ã —Ç–µ—Ä—è–µ—Ç–µ –∂–∏–∑–Ω—å.\n\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {game.current_answer}\n\n"
            message_text += update_game_message(chat_id)
            bot.send_message(chat_id, message_text, reply_markup=create_keyboard())
            question, answer = generate_question(game.level, game.difficulty)
            game.current_answer = answer
            game.total_questions += 1
            game.question_start_time = time.time()
            bot.send_message(chat_id, f"‚ùì –í–æ–ø—Ä–æ—Å {game.total_questions}:\n{question}", reply_markup=ReplyKeyboardRemove())
    else:
        try:
            user_answer = int(message.text)
        except ValueError:
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç.", reply_markup=create_keyboard())
            return
        if user_answer == game.current_answer:
            score_multiplier = max(1, int(12 - answer_time))
            game.score += game.level * 10 * score_multiplier
            if game.total_questions % 5 == 0:
                game.level += 1
            message_text = f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ {game.level * 10 * score_multiplier} –æ—á–∫–æ–≤.\n\n"
            message_text += update_game_message(chat_id)
            bot.send_message(chat_id, message_text, reply_markup=create_keyboard())
            question, answer = generate_question(game.level, game.difficulty)
            game.current_answer = answer
            game.total_questions += 1
            game.question_start_time = time.time()
            bot.send_message(chat_id, f"‚ùì –í–æ–ø—Ä–æ—Å {game.total_questions}:\n{question}", reply_markup=ReplyKeyboardRemove())
        else:
            game.lives -= 1
            if game.lives == 0:
                message_text = "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∂–∏–∑–Ω–∏. –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.\n\n"
                message_text += f"üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\nüåü –û—á–∫–∏: {game.score}"
                bot.send_message(chat_id, message_text, reply_markup=create_keyboard())
                del games[chat_id]
            else:
                message_text = f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {game.current_answer}. –í—ã —Ç–µ—Ä—è–µ—Ç–µ –∂–∏–∑–Ω—å.\n\n"
                message_text += update_game_message(chat_id)
                bot.send_message(chat_id, message_text, reply_markup=create_keyboard())
                question, answer = generate_question(game.level, game.difficulty)
                game.current_answer = answer
                game.total_questions += 1
                game.question_start_time = time.time()
                bot.send_message(chat_id, f"‚ùì –í–æ–ø—Ä–æ—Å {game.total_questions}:\n{question}", reply_markup=ReplyKeyboardRemove())

@bot.callback_query_handler(func=lambda call: call.data == '/start')
def start_new_game(call):
    start_game(call.message)

@bot.callback_query_handler(func=lambda call: call.data == '/hint')
def hint_callback(call):
    chat_id = call.message.chat.id
    if chat_id not in games:
        bot.answer_callback_query(callback_query_id=call.id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
        return
    game = games[chat_id]
    if game.hints_used < 3:
        game.hints_used += 1
        bot.answer_callback_query(callback_query_id=call.id, text=f"–ü–æ–¥—Å–∫–∞–∑–∫–∞: {game.current_answer}")
    else:
        bot.answer_callback_query(callback_query_id=call.id, text="–£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç –ø–æ–¥—Å–∫–∞–∑–æ–∫.")

def hint_handler(message):
    chat_id = message.chat.id
    if chat_id not in games:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
        return
    hint_callback(message)

@bot.message_handler(commands=['hint'])
def handle_hint_command(message):
    hint_handler(message)

bot.polling()  