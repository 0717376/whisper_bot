import os
import random
from dotenv import load_dotenv
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

load_dotenv()

API_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
bot = telebot.TeleBot(API_TOKEN)

games = {}

class Game:
    def __init__(self, chat_id, difficulty):
        self.chat_id = chat_id
        self.lives = 10
        self.score = 0
        self.level = 1
        self.total_questions = 0
        self.difficulty = difficulty
        self.hints_used = 0
        self.current_answer = None

def generate_question(level, difficulty):
    ops = ['+', '-', '*']
    op = random.choice(ops)
    if difficulty == 'easy':
        a, b = random.randint(1, 5 * level), random.randint(1, 5 * level)
    elif difficulty == 'medium':
        a, b = random.randint(5 * level, 10 * level), random.randint(5 * level, 10 * level)
    else:
        a, b = random.randint(10 * level, 15 * level), random.randint(10 * level, 15 * level)
    
    question = f"{a} {op} {b}"
    answer = eval(question)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ eval –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
    return question, answer

def update_game_message(chat_id):
    game = games[chat_id]
    message = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä—ã:\n\n‚û°Ô∏è –í–æ–ø—Ä–æ—Å: {game.total_questions}\n‚ù§Ô∏è –ñ–∏–∑–Ω–∏: {game.lives}\nüåü –û—á–∫–∏: {game.score}\nüí° –ü–æ–¥—Å–∫–∞–∑–∫–∏: {game.hints_used}/3"
    return message

def create_keyboard():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("–ù–æ–≤–∞—è –∏–≥—Ä–∞", callback_data='/start'))
    keyboard.add(InlineKeyboardButton("–ü—Ä–∞–≤–∏–ª–∞ –∏ –ø–æ–º–æ—â—å", callback_data='/help'))
    keyboard.add(InlineKeyboardButton("–ü–æ–¥—Å–∫–∞–∑–∫–∞", callback_data='/hint'))
    return keyboard

@bot.message_handler(commands=['start'])
def start_game(message):
    chat_id = message.chat.id
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("–õ–µ–≥–∫–∏–π", callback_data='easy'))
    keyboard.add(InlineKeyboardButton("–°—Ä–µ–¥–Ω–∏–π", callback_data='medium'))
    keyboard.add(InlineKeyboardButton("–°–ª–æ–∂–Ω—ã–π", callback_data='hard'))
    bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data in ['easy', 'medium', 'hard'])
def set_difficulty(call):
    chat_id = call.message.chat.id
    difficulty = call.data
    games[chat_id] = Game(chat_id, difficulty)
    bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id, text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {difficulty} —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏.")
    rules = (
        "üî¢ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫—É—é –∏–≥—Ä—É! üéÆ\n\nüìú –ü—Ä–∞–≤–∏–ª–∞:\n"
        "- –£ –≤–∞—Å –µ—Å—Ç—å 10 –∂–∏–∑–Ω–µ–π (‚ù§Ô∏è).\n"
        "- –í–∞–º –±—É–¥—É—Ç –¥–∞–≤–∞—Ç—å—Å—è —Å–ª—É—á–∞–π–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –ø–æ –∞—Ä–∏—Ñ–º–µ—Ç–∏–∫–µ.\n"
        "- –°–ª–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–º–µ—Ä–æ–≤ –±—É–¥–µ—Ç –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å—Å—è.\n"
        "- –ó–∞ –∫–∞–∂–¥—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –æ—á–∫–∏ (üåü).\n"
        "- –ï—Å–ª–∏ –≤—ã –æ—à–∏–±–∞–µ—Ç–µ—Å—å, —Ç–æ —Ç–µ—Ä—è–µ—Ç–µ –∂–∏–∑–Ω—å (‚ù§Ô∏è).\n"
        "- –ò–≥—Ä–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ —É –≤–∞—Å –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è –∂–∏–∑–Ω–∏.\n"
        "- –£ –≤–∞—Å –µ—Å—Ç—å 3 –ø–æ–¥—Å–∫–∞–∑–∫–∏ (üí°), –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å.\n\n"
        "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º! üòÑ"
    )
    bot.send_message(chat_id, rules, reply_markup=create_keyboard())
    send_new_question(chat_id)

def send_new_question(chat_id):
    game = games[chat_id]
    question, answer = generate_question(game.level, game.difficulty)
    game.current_answer = answer
    game.total_questions += 1
    bot.send_message(chat_id, f"‚ùì –í–æ–ø—Ä–æ—Å {game.total_questions}:\n{question}")

@bot.message_handler(commands=['help'])
def show_help(message):
    chat_id = message.chat.id
    help_text = (
        "üìú –ü—Ä–∞–≤–∏–ª–∞ –∏ –ø–æ–º–æ—â—å:\n\n"
        "- –£ –≤–∞—Å –µ—Å—Ç—å 10 –∂–∏–∑–Ω–µ–π (‚ù§Ô∏è).\n"
        "- –í–∞–º –±—É–¥—É—Ç –¥–∞–≤–∞—Ç—å—Å—è —Å–ª—É—á–∞–π–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –ø–æ –∞—Ä–∏—Ñ–º–µ—Ç–∏–∫–µ.\n"
        "- –°–ª–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–º–µ—Ä–æ–≤ –±—É–¥–µ—Ç –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å—Å—è.\n"
        "- –ó–∞ –∫–∞–∂–¥—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –æ—á–∫–∏ (üåü).\n"
        "- –ï—Å–ª–∏ –≤—ã –æ—à–∏–±–∞–µ—Ç–µ—Å—å, —Ç–æ —Ç–µ—Ä—è–µ—Ç–µ –∂–∏–∑–Ω—å (‚ù§Ô∏è).\n"
        "- –ò–≥—Ä–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ —É –≤–∞—Å –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è –∂–∏–∑–Ω–∏.\n"
        "- –£ –≤–∞—Å –µ—Å—Ç—å 3 –ø–æ–¥—Å–∫–∞–∑–∫–∏ (üí°), –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å.\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è!"
    )
    bot.reply_to(message, help_text, reply_markup=create_keyboard())

@bot.message_handler(func=lambda message: True)
def check_answer(message):
    chat_id = message.chat.id
    if chat_id not in games:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start", reply_markup=create_keyboard())
        return

    game = games[chat_id]
    try:
        user_answer = int(message.text)
    except ValueError:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç.", reply_markup=create_keyboard())
        return

    if user_answer == game.current_answer:
        game.score += game.level * 10
        game.level += 1
        message_text = f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ {game.level * 10} –æ—á–∫–æ–≤.\n\n"
    else:
        game.lives -= 1
        if game.lives == 0:
            message_text = "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∂–∏–∑–Ω–∏. –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.\n\n"
            message_text += f"üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n‚û°Ô∏è –í–æ–ø—Ä–æ—Å–æ–≤ –æ—Ç–≤–µ—á–µ–Ω–æ: {game.total_questions}\nüåü –û—á–∫–∏: {game.score}"
            bot.reply_to(message, message_text, reply_markup=create_keyboard())
            del games[chat_id]
            return
        else:
            message_text = f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {game.current_answer}. –í—ã —Ç–µ—Ä—è–µ—Ç–µ –∂–∏–∑–Ω—å.\n\n"

    message_text += update_game_message(chat_id)
    send_new_question(chat_id)
    bot.reply_to(message, message_text, reply_markup=create_keyboard())

@bot.callback_query_handler(func=lambda call: call.data == '/start')
def start_new_game(call):
    start_game(call.message)

@bot.callback_query_handler(func=lambda call: call.data == '/help')
def show_help_inline(call):
    show_help(call.message)

@bot.callback_query_handler(func=lambda call: call.data == '/hint')
def hint_callback(call):
    chat_id = call.message.chat.id
    if chat_id not in games:
        bot.answer_callback_query(callback_query_id=call.id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
        return
    game = games[chat_id]
    if game.hints_used < 3:
        game.hints_used += 1
        bot.answer_callback_query(callback_query_id=call.id, text=f"–ü–æ–¥—Å–∫–∞–∑–∫–∞: {game.current_answer}")
    else:
        bot.answer_callback_query(callback_query_id=call.id, text="–£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç –ø–æ–¥—Å–∫–∞–∑–æ–∫.")

@bot.message_handler(commands=['hint'])
def handle_hint_command(message):
    hint_handler(message)

bot.polling()
